#services:
#  mysql:
#    container_name: app-mysql
#    image: mysql:8.0.32
#    restart: on-failure
#    build:
#      context: .
#    volumes:
##      - /root/docker/compose/mysql/data:/var/lib/mysql
#      - ./deploy/mysql:/var/lib/mysql
#    environment:
#      - MYSQL_ROOT_PASSWORD=888888
#      - MYSQL_DATABASE=cook-master
#    ports:
#      - "3306:3306"
#    command:
#      --authentication_policy=mysql_native_password
#      --character-set-server=utf8mb4
#      --collation-server=utf8mb4_general_ci
#
##    networks:
##      - my-server
#
#  app:
#    # 容器名称
#    container_name: app
#    # 构建目录
#    build:
#      context: .
#      dockerfile: prod.Dockerfile
#    # 重启规则
#    restart: on-failure # 设置自动重启，这一步必须设置，主要是存在mysql还没有启动完成就启动了node服务
#    # 暴露端口
#    expose:
#      - 3000
#    ports:
#      - 3000:3000
#    # 构建依赖
#    depends_on:
#      - mysql
#    env_file:
#      - .env.local
#    # 环境变量
#    environment:
#      - RUN_TIME_ENV=local
#    # 网桥
##    networks:
##      - my-server
#
##  networks:
##    my-server:

version: "3.0"

services:
  # docker容器启动的redis默认是没有redis.conf的配置文件，所以用docker启动redis之前，需要先去官网下载redis.conf的配置文件
#  redis_demo: # 服务名称
#    container_name: redis_demo # 容器名称
#    image: daocloud.io/library/redis:6.0.3-alpine3.11 # 使用官方镜像
#    # 配置redis.conf方式启动
#    # command: redis-server /usr/local/etc/redis/redis.conf --requirepass 123456 --appendonly yes # 设置redis登录密码 123456、--appendonly yes：这个命令是用于开启redis数据持久化
#    # 无需配置文件方式启动
#    command: redis-server --appendonly yes # 开启redis数据持久化
#    ports:
#      - 6379:6379 # 本机端口:容器端口
#    restart: on-failure # 自动重启
#    volumes:
#      - ./deploy/redis/db:/data # 把持久化数据挂载到宿主机
#      - ./deploy/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf  # 把redis的配置文件挂载到宿主机
#      - ./deploy/redis/logs:/logs # 用来存放日志
#    environment:
#      - TZ=Asia/Shanghai  # 解决容器 时区的问题
#    networks:
#      - my-server_demo

#  mysql_demo:
#    container_name: mysql_demo
#    image: daocloud.io/library/mysql:8.0.20 # 使用官方镜像
#    ports:
#      - 3306:3306 # 本机端口:容器端口
#    restart: on-failure
#    environment:
#      MYSQL_DATABASE: demo_db
#      MYSQL_ROOT_PASSWORD: 123456
#      MYSQL_USER: demo_user
#      MYSQL_PASSWORD: 123456
#      MYSQL_ROOT_HOST: '%'
#    volumes:
#      - ./deploy/mysql/db:/var/lib/mysql # 用来存放了数据库表文件
#      - ./deploy/mysql/conf/my.cnf:/etc/my.cnf # 存放自定义的配置文件
#      # 我们在启动MySQL容器时自动创建我们需要的数据库和表
#      # mysql官方镜像中提供了容器启动时自动docker-entrypoint-initdb.d下的脚本的功能
#      - ./deploy/mysql/init:/docker-entrypoint-initdb.d/ # 存放初始化的脚本
#    networks:
#      - my-server_demo

  server_demo: # nestjs服务
    container_name: cook-recipe-api
    build: # 根据Dockerfile构建镜像
      context: .
      dockerfile: dev.Dockerfile
    ports:
      - "9000:9000"
    restart: on-failure # 设置自动重启，这一步必须设置，主要是存在mysql还没有启动完成就启动了node服务
    networks:
      - cook-recipe-api-network
#    depends_on: # node服务依赖于mysql和redis
#      - redis_demo
#      - mysql_demo

# 声明一下网桥  my-server。
# 重要：将所有服务都挂载在同一网桥即可通过容器名来互相通信了
# 如nestjs连接mysql和redis，可以通过容器名来互相通信
networks:
  cook-recipe-api-network:
